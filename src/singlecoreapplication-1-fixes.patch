diff -ruN '--exclude=.git' SingleApplication.orig/CMakeLists.txt SingleApplication/CMakeLists.txt
--- SingleApplication.orig/CMakeLists.txt	2019-12-14 14:17:26.049794827 +0100
+++ SingleApplication/CMakeLists.txt	2019-12-14 14:16:28.346142835 +0100
@@ -1,43 +1,64 @@
-cmake_minimum_required(VERSION 3.1.0)
+cmake_minimum_required(VERSION 2.8.11)
+set(CMAKE_CXX_STANDARD 11)
 
-project(SingleApplication)
+include(Version.cmake)
 
-set(CMAKE_INCLUDE_CURRENT_DIR ON)
-set(CMAKE_AUTOMOC ON)
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --std=c++11 -U__STRICT_ANSI__ -Wall -Wextra -Wpedantic -Woverloaded-virtual -fpermissive")
 
-# SingleApplication base class
-set(QAPPLICATION_CLASS QCoreApplication CACHE STRING "Inheritance class for SingleApplication")
-set_property(CACHE QAPPLICATION_CLASS PROPERTY STRINGS QApplication QGuiApplication QCoreApplication)
-
-# Libary target
-add_library(${PROJECT_NAME} STATIC
-    singleapplication.cpp
-    singleapplication_p.cpp
-    )
-
-# Find dependencies
-find_package(Qt5Network)
-if(QAPPLICATION_CLASS STREQUAL QApplication)
-    find_package(Qt5 COMPONENTS Widgets REQUIRED)
-elseif(QAPPLICATION_CLASS STREQUAL QGuiApplication)
-    find_package(Qt5 COMPONENTS Gui REQUIRED)
-else()
-    find_package(Qt5 COMPONENTS Core REQUIRED)
+#option(BUILD_SHARED_LIBS "Build shared library" ON)
+
+if(NOT QAPPLICATION_CLASS)
+  set(QAPPLICATION_CLASS "QApplication")
 endif()
-add_compile_definitions(QAPPLICATION_CLASS=${QAPPLICATION_CLASS})
 
-# Link dependencies
-target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Network)
-if(QAPPLICATION_CLASS STREQUAL QApplication)
-    target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Widgets)
-elseif(QAPPLICATION_CLASS STREQUAL QGuiApplication)
-    target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Gui)
+if (QAPPLICATION_CLASS STREQUAL "QApplication")
+  set(SINGLEAPPLICATION_NAME "singleapplication")
+  set(SINGLEAPPLICATION_CLASS "SingleApplication")
+elseif (QAPPLICATION_CLASS STREQUAL "QCoreApplication")
+  set(SINGLEAPPLICATION_NAME "singlecoreapplication")
+  set(SINGLEAPPLICATION_CLASS "SingleCoreApplication")
+elseif (QAPPLICATION_CLASS STREQUAL "QGuiApplication")
+  set(SINGLEAPPLICATION_NAME "singleguiapplication")
+  set(SINGLEAPPLICATION_CLASS "SingleGuiApplication")
 else()
-    target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Core)
+  message(FATAL_ERROR "Application class must be QApplication, QCoreApplication or QGuiApplication")
 endif()
 
-if(WIN32)
-    target_link_libraries(${PROJECT_NAME} PRIVATE advapi32)
-endif()
+project(${SINGLEAPPLICATION_NAME})
 
-target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
+set(LIB_SUFFIX "" CACHE STRING "Define suffix of directory name (32/64)")
+set(BIN_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/bin" CACHE PATH "The subdirectory to the binaries prefix (default prefix/bin)")
+set(LIB_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}" CACHE PATH "The subdirectory relative to the install prefix where libraries will be installed (default is /lib${LIB_SUFFIX})")
+set(INCLUDE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/include" CACHE PATH "The subdirectory to the header prefix")
+
+include_directories(${CMAKE_CURRENT_SOURCE_DIR})
+include_directories(${CMAKE_CURRENT_BINARY_DIR})
+configure_file("${CMAKE_CURRENT_SOURCE_DIR}/singleapplication.h.in" "${CMAKE_CURRENT_BINARY_DIR}/${SINGLEAPPLICATION_NAME}.h" @ONLY)
+configure_file("${CMAKE_CURRENT_SOURCE_DIR}/singleapplication_p.h.in" "${CMAKE_CURRENT_BINARY_DIR}/singleapplication_p.h" @ONLY)
+configure_file("${CMAKE_CURRENT_SOURCE_DIR}/singleapplication.pc.cmake" "${CMAKE_CURRENT_BINARY_DIR}/${SINGLEAPPLICATION_NAME}.pc" @ONLY)
+
+set(QT_MIN_VERSION 5.5)
+find_package(Qt5 ${QT_MIN_VERSION} REQUIRED COMPONENTS Core Widgets Network)
+
+set(SINGLEAPP-SOURCES singleapplication.cpp singleapplication_p.cpp)
+set(SINGLEAPP-MOC-HEADERS ${CMAKE_CURRENT_BINARY_DIR}/${SINGLEAPPLICATION_NAME}.h ${CMAKE_CURRENT_BINARY_DIR}/singleapplication_p.h)
+QT5_WRAP_CPP(SINGLEAPP-SOURCES-MOC ${SINGLEAPP-MOC-HEADERS})
+add_library(${SINGLEAPPLICATION_NAME} ${SINGLEAPP-SOURCES} ${SINGLEAPP-SOURCES-MOC})
+target_link_libraries(${SINGLEAPPLICATION_NAME} Qt5::Core Qt5::Widgets Qt5::Network)
+
+install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${SINGLEAPPLICATION_NAME}.pc" DESTINATION "${LIB_INSTALL_DIR}/pkgconfig")
+
+set_target_properties(${SINGLEAPPLICATION_NAME} PROPERTIES
+  VERSION ${SINGLEAPPLICATION_SOVERSION_MAJOR}.${SINGLEAPPLICATION_SOVERSION_MINOR}.${SINGLEAPPLICATION_SOVERSION_PATCH}
+  SOVERSION ${SINGLEAPPLICATION_SOVERSION_MAJOR}
+  INSTALL_NAME_DIR ${LIB_INSTALL_DIR}
+  DEFINE_SYMBOL MAKE_SINGLEAPPLICATION_LIB
+  LINK_INTERFACE_LIBRARIES ""
+  PUBLIC_HEADER "${CMAKE_CURRENT_BINARY_DIR}/${SINGLEAPPLICATION_NAME}.h"
+)
+
+install(TARGETS ${SINGLEAPPLICATION_NAME}
+  LIBRARY DESTINATION ${LIB_INSTALL_DIR}
+  PUBLIC_HEADER DESTINATION ${INCLUDE_INSTALL_DIR}
+)
diff -ruN '--exclude=.git' SingleApplication.orig/singleapplication.cpp SingleApplication/singleapplication.cpp
--- SingleApplication.orig/singleapplication.cpp	2019-12-14 14:17:26.049794827 +0100
+++ SingleApplication/singleapplication.cpp	2019-12-14 14:12:58.207410576 +0100
@@ -26,7 +26,6 @@
 #include <QtCore/QByteArray>
 #include <QtCore/QSharedMemory>
 
-#include "singleapplication.h"
 #include "singleapplication_p.h"
 
 /**
@@ -36,7 +35,7 @@
  * @param argv
  * @param {bool} allowSecondaryInstances
  */
-SingleApplication::SingleApplication( int &argc, char *argv[], bool allowSecondary, Options options, int timeout )
+SINGLEAPPLICATION_CLASS::SINGLEAPPLICATION_CLASS( int &argc, char *argv[], bool allowSecondary, Options options, int timeout )
     : app_t( argc, argv ), d_ptr( new SingleApplicationPrivate( this ) )
 {
     Q_D(SingleApplication);
@@ -74,7 +73,7 @@
     } else {
         // Attempt to attach to the memory segment
         if( ! d->memory->attach() ) {
-            qCritical() << "SingleApplication: Unable to attach to shared memory block.";
+            qCritical() << QString(QT_STRINGIFY(SINGLEAPPLICATION_CLASS)) + ":" << "Unable to attach to shared memory block.";
             qCritical() << d->memory->errorString();
             delete d;
             ::exit( EXIT_FAILURE );
@@ -92,7 +91,7 @@
         if( d->blockChecksum() == inst->checksum ) break;
 
         if( time.elapsed() > 5000 ) {
-            qWarning() << "SingleApplication: Shared memory block has been in an inconsistent state from more than 5s. Assuming primary instance failure.";
+            qWarning() << QString(QT_STRINGIFY(SINGLEAPPLICATION_CLASS)) + ":" << "Shared memory block has been in an inconsistent state from more than 5s. Assuming primary instance failure.";
             d->initializeMemoryBlock();
         }
 
@@ -134,37 +133,37 @@
 /**
  * @brief Destructor
  */
-SingleApplication::~SingleApplication()
+SINGLEAPPLICATION_CLASS::~SINGLEAPPLICATION_CLASS()
 {
     Q_D(SingleApplication);
     delete d;
 }
 
-bool SingleApplication::isPrimary()
+bool SINGLEAPPLICATION_CLASS::isPrimary()
 {
     Q_D(SingleApplication);
     return d->server != nullptr;
 }
 
-bool SingleApplication::isSecondary()
+bool SINGLEAPPLICATION_CLASS::isSecondary()
 {
     Q_D(SingleApplication);
     return d->server == nullptr;
 }
 
-quint32 SingleApplication::instanceId()
+quint32 SINGLEAPPLICATION_CLASS::instanceId()
 {
     Q_D(SingleApplication);
     return d->instanceNumber;
 }
 
-qint64 SingleApplication::primaryPid()
+qint64 SINGLEAPPLICATION_CLASS::primaryPid()
 {
     Q_D(SingleApplication);
     return d->primaryPid();
 }
 
-bool SingleApplication::sendMessage( QByteArray message, int timeout )
+bool SINGLEAPPLICATION_CLASS::sendMessage( QByteArray message, int timeout )
 {
     Q_D(SingleApplication);
 
diff -ruN '--exclude=.git' SingleApplication.orig/singleapplication.h SingleApplication/singleapplication.h
--- SingleApplication.orig/singleapplication.h	2019-12-14 14:17:26.049794827 +0100
+++ SingleApplication/singleapplication.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,135 +0,0 @@
-// The MIT License (MIT)
-//
-// Copyright (c) Itay Grudev 2015 - 2018
-//
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-//
-// The above copyright notice and this permission notice shall be included in
-// all copies or substantial portions of the Software.
-//
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-// THE SOFTWARE.
-
-#ifndef SINGLE_APPLICATION_H
-#define SINGLE_APPLICATION_H
-
-#include <QtCore/QtGlobal>
-#include <QtNetwork/QLocalSocket>
-
-#ifndef QAPPLICATION_CLASS
-  #define QAPPLICATION_CLASS QCoreApplication
-#endif
-
-#include QT_STRINGIFY(QAPPLICATION_CLASS)
-
-class SingleApplicationPrivate;
-
-/**
- * @brief The SingleApplication class handles multiple instances of the same
- * Application
- * @see QCoreApplication
- */
-class SingleApplication : public QAPPLICATION_CLASS
-{
-    Q_OBJECT
-
-    typedef QAPPLICATION_CLASS app_t;
-
-public:
-    /**
-     * @brief Mode of operation of SingleApplication.
-     * Whether the block should be user-wide or system-wide and whether the
-     * primary instance should be notified when a secondary instance had been
-     * started.
-     * @note Operating system can restrict the shared memory blocks to the same
-     * user, in which case the User/System modes will have no effect and the
-     * block will be user wide.
-     * @enum
-     */
-    enum Mode {
-        User                    = 1 << 0,
-        System                  = 1 << 1,
-        SecondaryNotification   = 1 << 2,
-        ExcludeAppVersion       = 1 << 3,
-        ExcludeAppPath          = 1 << 4
-    };
-    Q_DECLARE_FLAGS(Options, Mode)
-
-    /**
-     * @brief Intitializes a SingleApplication instance with argc command line
-     * arguments in argv
-     * @arg {int &} argc - Number of arguments in argv
-     * @arg {const char *[]} argv - Supplied command line arguments
-     * @arg {bool} allowSecondary - Whether to start the instance as secondary
-     * if there is already a primary instance.
-     * @arg {Mode} mode - Whether for the SingleApplication block to be applied
-     * User wide or System wide.
-     * @arg {int} timeout - Timeout to wait in milliseconds.
-     * @note argc and argv may be changed as Qt removes arguments that it
-     * recognizes
-     * @note Mode::SecondaryNotification only works if set on both the primary
-     * instance and the secondary instance.
-     * @note The timeout is just a hint for the maximum time of blocking
-     * operations. It does not guarantee that the SingleApplication
-     * initialisation will be completed in given time, though is a good hint.
-     * Usually 4*timeout would be the worst case (fail) scenario.
-     * @see See the corresponding QAPPLICATION_CLASS constructor for reference
-     */
-    explicit SingleApplication( int &argc, char *argv[], bool allowSecondary = false, Options options = Mode::User, int timeout = 1000 );
-    ~SingleApplication();
-
-    /**
-     * @brief Returns if the instance is the primary instance
-     * @returns {bool}
-     */
-    bool isPrimary();
-
-    /**
-     * @brief Returns if the instance is a secondary instance
-     * @returns {bool}
-     */
-    bool isSecondary();
-
-    /**
-     * @brief Returns a unique identifier for the current instance
-     * @returns {qint32}
-     */
-    quint32 instanceId();
-
-    /**
-     * @brief Returns the process ID (PID) of the primary instance
-     * @returns {qint64}
-     */
-    qint64 primaryPid();
-
-    /**
-     * @brief Sends a message to the primary instance. Returns true on success.
-     * @param {int} timeout - Timeout for connecting
-     * @returns {bool}
-     * @note sendMessage() will return false if invoked from the primary
-     * instance.
-     */
-    bool sendMessage( QByteArray message, int timeout = 100 );
-
-Q_SIGNALS:
-    void instanceStarted();
-    void receivedMessage( quint32 instanceId, QByteArray message );
-
-private:
-    SingleApplicationPrivate *d_ptr;
-    Q_DECLARE_PRIVATE(SingleApplication)
-};
-
-Q_DECLARE_OPERATORS_FOR_FLAGS(SingleApplication::Options)
-
-#endif // SINGLE_APPLICATION_H
diff -ruN '--exclude=.git' SingleApplication.orig/singleapplication.h.in SingleApplication/singleapplication.h.in
--- SingleApplication.orig/singleapplication.h.in	1970-01-01 01:00:00.000000000 +0100
+++ SingleApplication/singleapplication.h.in	2019-12-14 14:12:58.211410551 +0100
@@ -0,0 +1,133 @@
+// The MIT License (MIT)
+//
+// Copyright (c) Itay Grudev 2015 - 2018
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+//
+// The above copyright notice and this permission notice shall be included in
+// all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+// THE SOFTWARE.
+
+#ifndef @SINGLEAPPLICATION_CLASS@
+
+#include <QtCore/QtGlobal>
+#include <QtNetwork/QLocalSocket>
+
+#define QAPPLICATION_CLASS @QAPPLICATION_CLASS@
+#define SINGLEAPPLICATION_CLASS @SINGLEAPPLICATION_CLASS@
+
+#include QT_STRINGIFY(QAPPLICATION_CLASS)
+
+class SingleApplicationPrivate;
+
+/**
+ * @brief The SingleApplication class handles multiple instances of the same
+ * Application
+ * @see QCoreApplication
+ */
+class SINGLEAPPLICATION_CLASS : public QAPPLICATION_CLASS
+{
+    Q_OBJECT
+
+    typedef QAPPLICATION_CLASS app_t;
+
+public:
+    /**
+     * @brief Mode of operation of SingleApplication.
+     * Whether the block should be user-wide or system-wide and whether the
+     * primary instance should be notified when a secondary instance had been
+     * started.
+     * @note Operating system can restrict the shared memory blocks to the same
+     * user, in which case the User/System modes will have no effect and the
+     * block will be user wide.
+     * @enum
+     */
+    enum Mode {
+        User                    = 1 << 0,
+        System                  = 1 << 1,
+        SecondaryNotification   = 1 << 2,
+        ExcludeAppVersion       = 1 << 3,
+        ExcludeAppPath          = 1 << 4
+    };
+    Q_DECLARE_FLAGS(Options, Mode)
+
+    /**
+     * @brief Intitializes a SingleApplication instance with argc command line
+     * arguments in argv
+     * @arg {int &} argc - Number of arguments in argv
+     * @arg {const char *[]} argv - Supplied command line arguments
+     * @arg {bool} allowSecondary - Whether to start the instance as secondary
+     * if there is already a primary instance.
+     * @arg {Mode} mode - Whether for the SingleApplication block to be applied
+     * User wide or System wide.
+     * @arg {int} timeout - Timeout to wait in milliseconds.
+     * @note argc and argv may be changed as Qt removes arguments that it
+     * recognizes
+     * @note Mode::SecondaryNotification only works if set on both the primary
+     * instance and the secondary instance.
+     * @note The timeout is just a hint for the maximum time of blocking
+     * operations. It does not guarantee that the SingleApplication
+     * initialisation will be completed in given time, though is a good hint.
+     * Usually 4*timeout would be the worst case (fail) scenario.
+     * @see See the corresponding QAPPLICATION_CLASS constructor for reference
+     */
+    explicit SINGLEAPPLICATION_CLASS( int &argc, char *argv[], bool allowSecondary = false, Options options = Mode::User, int timeout = 1000 );
+    ~SINGLEAPPLICATION_CLASS();
+
+    /**
+     * @brief Returns if the instance is the primary instance
+     * @returns {bool}
+     */
+    bool isPrimary();
+
+    /**
+     * @brief Returns if the instance is a secondary instance
+     * @returns {bool}
+     */
+    bool isSecondary();
+
+    /**
+     * @brief Returns a unique identifier for the current instance
+     * @returns {qint32}
+     */
+    quint32 instanceId();
+
+    /**
+     * @brief Returns the process ID (PID) of the primary instance
+     * @returns {qint64}
+     */
+    qint64 primaryPid();
+
+    /**
+     * @brief Sends a message to the primary instance. Returns true on success.
+     * @param {int} timeout - Timeout for connecting
+     * @returns {bool}
+     * @note sendMessage() will return false if invoked from the primary
+     * instance.
+     */
+    bool sendMessage( QByteArray message, int timeout = 100 );
+
+Q_SIGNALS:
+    void instanceStarted();
+    void receivedMessage( quint32 instanceId, QByteArray message );
+
+private:
+    SingleApplicationPrivate *d_ptr;
+    Q_DECLARE_PRIVATE(SingleApplication)
+};
+
+Q_DECLARE_OPERATORS_FOR_FLAGS(SINGLEAPPLICATION_CLASS::Options)
+
+#endif // @SINGLEAPPLICATION_CLASS@
diff -ruN '--exclude=.git' SingleApplication.orig/singleapplication.pc.cmake SingleApplication/singleapplication.pc.cmake
--- SingleApplication.orig/singleapplication.pc.cmake	1970-01-01 01:00:00.000000000 +0100
+++ SingleApplication/singleapplication.pc.cmake	2019-12-14 14:12:58.211410551 +0100
@@ -0,0 +1,10 @@
+prefix=@CMAKE_INSTALL_PREFIX@
+exec_prefix=@CMAKE_INSTALL_PREFIX@
+libdir=@LIB_INSTALL_DIR@
+includedir=@INCLUDE_INSTALL_DIR@
+
+Name: @SINGLEAPPLICATION_NAME@
+Description: Library to detect and communicate with running instances of an application
+Version: @SINGLEAPPLICATION_VERSION_PACKAGE@
+Libs: -L${libdir} -l@SINGLEAPPLICATION_NAME@
+Cflags: -I${includedir}
diff -ruN '--exclude=.git' SingleApplication.orig/singleapplication_p.cpp SingleApplication/singleapplication_p.cpp
--- SingleApplication.orig/singleapplication_p.cpp	2019-12-14 14:17:26.049794827 +0100
+++ SingleApplication/singleapplication_p.cpp	2019-12-14 14:12:58.211410551 +0100
@@ -39,7 +39,6 @@
 #include <QtNetwork/QLocalServer>
 #include <QtNetwork/QLocalSocket>
 
-#include "singleapplication.h"
 #include "singleapplication_p.h"
 
 #ifdef Q_OS_UNIX
@@ -53,7 +52,7 @@
     #include <lmcons.h>
 #endif
 
-SingleApplicationPrivate::SingleApplicationPrivate( SingleApplication *q_ptr )
+SingleApplicationPrivate::SingleApplicationPrivate( SINGLEAPPLICATION_CLASS *q_ptr )
     : q_ptr( q_ptr )
 {
     server = nullptr;
@@ -87,24 +86,24 @@
 {
     QCryptographicHash appData( QCryptographicHash::Sha256 );
     appData.addData( "SingleApplication", 17 );
-    appData.addData( SingleApplication::app_t::applicationName().toUtf8() );
-    appData.addData( SingleApplication::app_t::organizationName().toUtf8() );
-    appData.addData( SingleApplication::app_t::organizationDomain().toUtf8() );
+    appData.addData( SINGLEAPPLICATION_CLASS::app_t::applicationName().toUtf8() );
+    appData.addData( SINGLEAPPLICATION_CLASS::app_t::organizationName().toUtf8() );
+    appData.addData( SINGLEAPPLICATION_CLASS::app_t::organizationDomain().toUtf8() );
 
-    if( ! (options & SingleApplication::Mode::ExcludeAppVersion) ) {
-        appData.addData( SingleApplication::app_t::applicationVersion().toUtf8() );
+    if( ! (options & SINGLEAPPLICATION_CLASS::Mode::ExcludeAppVersion) ) {
+        appData.addData( SINGLEAPPLICATION_CLASS::app_t::applicationVersion().toUtf8() );
     }
 
-    if( ! (options & SingleApplication::Mode::ExcludeAppPath) ) {
+    if( ! (options & SINGLEAPPLICATION_CLASS::Mode::ExcludeAppPath) ) {
 #ifdef Q_OS_WIN
-        appData.addData( SingleApplication::app_t::applicationFilePath().toLower().toUtf8() );
+        appData.addData( SINGLEAPPLICATION_CLASS::app_t::applicationFilePath().toLower().toUtf8() );
 #else
-        appData.addData( SingleApplication::app_t::applicationFilePath().toUtf8() );
+        appData.addData( SINGLEAPPLICATION_CLASS::app_t::applicationFilePath().toUtf8() );
 #endif
     }
 
     // User level block requires a user specific data in the hash
-    if( options & SingleApplication::Mode::User ) {
+    if( options & SINGLEAPPLICATION_CLASS::Mode::User ) {
 #ifdef Q_OS_WIN
         wchar_t username [ UNLEN + 1 ];
         // Specifies size of the buffer on input
@@ -145,7 +144,7 @@
 
 void SingleApplicationPrivate::startPrimary()
 {
-    Q_Q(SingleApplication);
+    Q_Q(SINGLEAPPLICATION_CLASS);
 
     // Successful creation means that no main process exists
     // So we start a QLocalServer to listen for connections
@@ -154,7 +153,7 @@
 
     // Restrict access to the socket according to the
     // SingleApplication::Mode::User flag on User level or no restrictions
-    if( options & SingleApplication::Mode::User ) {
+    if( options & SINGLEAPPLICATION_CLASS::Mode::User ) {
       server->setSocketOptions( QLocalServer::UserAccessOption );
     } else {
       server->setSocketOptions( QLocalServer::WorldAccessOption );
@@ -329,7 +328,7 @@
 
 void SingleApplicationPrivate::readInitMessageBody( QLocalSocket *sock )
 {
-    Q_Q(SingleApplication);
+    Q_Q(SINGLEAPPLICATION_CLASS);
 
     if (!connectionMap.contains( sock )) {
         return;
@@ -382,7 +381,7 @@
 
     if( connectionType == NewInstance ||
         ( connectionType == SecondaryInstance &&
-          options & SingleApplication::Mode::SecondaryNotification ) )
+          options & SINGLEAPPLICATION_CLASS::Mode::SecondaryNotification ) )
     {
         Q_EMIT q->instanceStarted();
     }
@@ -394,7 +393,7 @@
 
 void SingleApplicationPrivate::slotDataAvailable( QLocalSocket *dataSocket, quint32 instanceId )
 {
-    Q_Q(SingleApplication);
+    Q_Q(SINGLEAPPLICATION_CLASS);
     Q_EMIT q->receivedMessage( instanceId, dataSocket->readAll() );
 }
 
diff -ruN '--exclude=.git' SingleApplication.orig/singleapplication_p.h SingleApplication/singleapplication_p.h
--- SingleApplication.orig/singleapplication_p.h	2019-12-14 14:17:26.049794827 +0100
+++ SingleApplication/singleapplication_p.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,99 +0,0 @@
-// The MIT License (MIT)
-//
-// Copyright (c) Itay Grudev 2015 - 2016
-//
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the "Software"), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-//
-// The above copyright notice and this permission notice shall be included in
-// all copies or substantial portions of the Software.
-//
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-// THE SOFTWARE.
-
-//
-//  W A R N I N G !!!
-//  -----------------
-//
-// This file is not part of the SingleApplication API. It is used purely as an
-// implementation detail. This header file may change from version to
-// version without notice, or may even be removed.
-//
-
-#ifndef SINGLEAPPLICATION_P_H
-#define SINGLEAPPLICATION_P_H
-
-#include <QtCore/QSharedMemory>
-#include <QtNetwork/QLocalServer>
-#include <QtNetwork/QLocalSocket>
-#include "singleapplication.h"
-
-struct InstancesInfo {
-    bool primary;
-    quint32 secondary;
-    qint64 primaryPid;
-    quint16 checksum;
-};
-
-struct ConnectionInfo {
-    explicit ConnectionInfo() :
-        msgLen(0), instanceId(0), stage(0) {}
-    qint64 msgLen;
-    quint32 instanceId;
-    quint8 stage;
-};
-
-class SingleApplicationPrivate : public QObject {
-Q_OBJECT
-public:
-    enum ConnectionType : quint8 {
-        InvalidConnection = 0,
-        NewInstance = 1,
-        SecondaryInstance = 2,
-        Reconnect = 3
-    };
-    enum ConnectionStage : quint8 {
-        StageHeader = 0,
-        StageBody = 1,
-        StageConnected = 2,
-    };
-    Q_DECLARE_PUBLIC(SingleApplication)
-
-    SingleApplicationPrivate( SingleApplication *q_ptr );
-     ~SingleApplicationPrivate();
-
-    void genBlockServerName();
-    void initializeMemoryBlock();
-    void startPrimary();
-    void startSecondary();
-    void connectToPrimary(int msecs, ConnectionType connectionType );
-    quint16 blockChecksum();
-    qint64 primaryPid();
-    void readInitMessageHeader(QLocalSocket *socket);
-    void readInitMessageBody(QLocalSocket *socket);
-
-    SingleApplication *q_ptr;
-    QSharedMemory *memory;
-    QLocalSocket *socket;
-    QLocalServer *server;
-    quint32 instanceNumber;
-    QString blockServerName;
-    SingleApplication::Options options;
-    QMap<QLocalSocket*, ConnectionInfo> connectionMap;
-
-public Q_SLOTS:
-    void slotConnectionEstablished();
-    void slotDataAvailable( QLocalSocket*, quint32 );
-    void slotClientConnectionClosed( QLocalSocket*, quint32 );
-};
-
-#endif // SINGLEAPPLICATION_P_H
diff -ruN '--exclude=.git' SingleApplication.orig/singleapplication_p.h.in SingleApplication/singleapplication_p.h.in
--- SingleApplication.orig/singleapplication_p.h.in	1970-01-01 01:00:00.000000000 +0100
+++ SingleApplication/singleapplication_p.h.in	2019-12-14 14:12:58.211410551 +0100
@@ -0,0 +1,99 @@
+// The MIT License (MIT)
+//
+// Copyright (c) Itay Grudev 2015 - 2016
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+//
+// The above copyright notice and this permission notice shall be included in
+// all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+// THE SOFTWARE.
+
+//
+//  W A R N I N G !!!
+//  -----------------
+//
+// This file is not part of the SingleApplication API. It is used purely as an
+// implementation detail. This header file may change from version to
+// version without notice, or may even be removed.
+//
+
+#ifndef SINGLEAPPLICATION_P_H
+#define SINGLEAPPLICATION_P_H
+
+#include <QtCore/QSharedMemory>
+#include <QtNetwork/QLocalServer>
+#include <QtNetwork/QLocalSocket>
+#include "@SINGLEAPPLICATION_NAME@.h"
+
+struct InstancesInfo {
+    bool primary;
+    quint32 secondary;
+    qint64 primaryPid;
+    quint16 checksum;
+};
+
+struct ConnectionInfo {
+    explicit ConnectionInfo() :
+        msgLen(0), instanceId(0), stage(0) {}
+    qint64 msgLen;
+    quint32 instanceId;
+    quint8 stage;
+};
+
+class SingleApplicationPrivate : public QObject {
+Q_OBJECT
+public:
+    enum ConnectionType : quint8 {
+        InvalidConnection = 0,
+        NewInstance = 1,
+        SecondaryInstance = 2,
+        Reconnect = 3
+    };
+    enum ConnectionStage : quint8 {
+        StageHeader = 0,
+        StageBody = 1,
+        StageConnected = 2,
+    };
+    Q_DECLARE_PUBLIC(SINGLEAPPLICATION_CLASS)
+
+    SingleApplicationPrivate( SINGLEAPPLICATION_CLASS *q_ptr );
+     ~SingleApplicationPrivate();
+
+    void genBlockServerName();
+    void initializeMemoryBlock();
+    void startPrimary();
+    void startSecondary();
+    void connectToPrimary(int msecs, ConnectionType connectionType );
+    quint16 blockChecksum();
+    qint64 primaryPid();
+    void readInitMessageHeader(QLocalSocket *socket);
+    void readInitMessageBody(QLocalSocket *socket);
+
+    SINGLEAPPLICATION_CLASS *q_ptr;
+    QSharedMemory *memory;
+    QLocalSocket *socket;
+    QLocalServer *server;
+    quint32 instanceNumber;
+    QString blockServerName;
+    SINGLEAPPLICATION_CLASS::Options options;
+    QMap<QLocalSocket*, ConnectionInfo> connectionMap;
+
+public Q_SLOTS:
+    void slotConnectionEstablished();
+    void slotDataAvailable( QLocalSocket*, quint32 );
+    void slotClientConnectionClosed( QLocalSocket*, quint32 );
+};
+
+#endif // SINGLEAPPLICATION_P_H
diff -ruN '--exclude=.git' SingleApplication.orig/Version.cmake SingleApplication/Version.cmake
--- SingleApplication.orig/Version.cmake	1970-01-01 01:00:00.000000000 +0100
+++ SingleApplication/Version.cmake	2019-12-14 14:12:58.207410576 +0100
@@ -0,0 +1,94 @@
+set(SINGLEAPPLICATION_VERSION_MAJOR 3)
+set(SINGLEAPPLICATION_VERSION_MINOR 0)
+set(SINGLEAPPLICATION_VERSION_PATCH 13)
+#set(SINGLEAPPLICATION_VERSION_PRERELEASE rc1)
+
+set(INCLUDE_GIT_REVISION ON)
+
+# 1. If the library source code has changed at all since the last update, then increment revision.
+# 2. If any interfaces have been added, removed, or changed since the last update, increment current, and set revision to 0.
+# 3. If any interfaces have been added since the last public release, then increment age.
+# 4. If any interfaces have been removed since the last public release, then set age to 0.
+set(SINGLEAPPLICATION_SOVERSION_CURRENT  0)
+set(SINGLEAPPLICATION_SOVERSION_REVISION 0)
+set(SINGLEAPPLICATION_SOVERSION_AGE      0)
+
+
+set(majorminorpatch "${SINGLEAPPLICATION_VERSION_MAJOR}.${SINGLEAPPLICATION_VERSION_MINOR}.${SINGLEAPPLICATION_VERSION_PATCH}")
+
+set(SINGLEAPPLICATION_VERSION_DISPLAY "${majorminorpatch}")
+set(SINGLEAPPLICATION_VERSION_PACKAGE "${majorminorpatch}")
+
+if(${SINGLEAPPLICATION_VERSION_PATCH} EQUAL "0")
+  set(SINGLEAPPLICATION_VERSION_DISPLAY "${SINGLEAPPLICATION_VERSION_MAJOR}.${SINGLEAPPLICATION_VERSION_MINOR}")
+endif(${SINGLEAPPLICATION_VERSION_PATCH} EQUAL "0")
+
+if(SINGLEAPPLICATION_VERSION_PRERELEASE)
+  set(SINGLEAPPLICATION_VERSION_DISPLAY "${SINGLEAPPLICATION_VERSION_DISPLAY} ${SINGLEAPPLICATION_VERSION_PRERELEASE}")
+  set(SINGLEAPPLICATION_VERSION_RPM_R   "0.${SINGLEAPPLICATION_VERSION_PRERELEASE}")
+  set(SINGLEAPPLICATION_VERSION_PACKAGE "${SINGLEAPPLICATION_VERSION_PACKAGE}${SINGLEAPPLICATION_VERSION_PRERELEASE}")
+endif(SINGLEAPPLICATION_VERSION_PRERELEASE)
+
+math(EXPR SINGLEAPPLICATION_SOVERSION_MAJOR "${SINGLEAPPLICATION_SOVERSION_CURRENT} - ${SINGLEAPPLICATION_SOVERSION_AGE}")
+math(EXPR SINGLEAPPLICATION_SOVERSION_MINOR "${SINGLEAPPLICATION_SOVERSION_AGE}")
+math(EXPR SINGLEAPPLICATION_SOVERSION_PATCH "${SINGLEAPPLICATION_SOVERSION_REVISION}")
+
+if(INCLUDE_GIT_REVISION AND EXISTS "${CMAKE_SOURCE_DIR}/.git")
+
+  find_program(GIT_EXECUTABLE git)
+  if(NOT GIT_EXECUTABLE OR GIT_EXECUTABLE-NOTFOUND)
+    message(FATAL_ERROR "Missing GIT executable." )
+  endif()
+
+  # Get the current working branch
+  execute_process(
+    COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
+    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
+    RESULT_VARIABLE GIT_CMD_RESULT_BRANCH
+    OUTPUT_VARIABLE GIT_BRANCH
+    OUTPUT_STRIP_TRAILING_WHITESPACE
+    ERROR_QUIET
+  )
+  # Get the latest abbreviated commit hash of the working branch
+  execute_process(
+    COMMAND ${GIT_EXECUTABLE} describe --long --tags --always
+    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
+    RESULT_VARIABLE GIT_CMD_RESULT_REVISION
+    OUTPUT_VARIABLE GIT_REVISION
+    OUTPUT_STRIP_TRAILING_WHITESPACE
+    ERROR_QUIET
+  )
+
+  if(NOT ${GIT_CMD_RESULT_REVISION} EQUAL 0)
+    message(FATAL_ERROR "GIT command failed to get revision string '${GIT_REVISION}'")
+  endif()
+
+endif()
+
+if(FORCE_GIT_REVISION)
+  set(GIT_REVISION ${FORCE_GIT_REVISION})
+endif()
+
+if(GIT_REVISION)
+
+  string(REGEX REPLACE "^(.+)-([0-9]+)-(g[a-f0-9]+)$" "\\1;\\2;\\3" GIT_PARTS ${GIT_REVISION})
+
+  if(NOT GIT_PARTS)
+    message(FATAL_ERROR "Failed to parse git revision string '${GIT_REVISION}'")
+  endif()
+
+  list(LENGTH GIT_PARTS GIT_PARTS_LENGTH)
+  if(NOT GIT_PARTS_LENGTH EQUAL 3)
+    message(FATAL_ERROR "Failed to parse git revision string '${GIT_REVISION}'")
+  endif()
+
+  list(GET GIT_PARTS 0 GIT_TAGNAME)
+  list(GET GIT_PARTS 1 GIT_COMMITCOUNT)
+  list(GET GIT_PARTS 2 GIT_SHA1)
+
+  set(HAS_GIT_REVISION ON)
+
+  set(SINGLEAPPLICATION_VERSION_DISPLAY "${GIT_REVISION}")
+  set(SINGLEAPPLICATION_VERSION_PACKAGE "${GIT_TAGNAME}.${GIT_COMMITCOUNT}.${GIT_SHA1}")
+
+endif()
