This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jonas Kvinge <jonas@jkvinge.net>
Date: Wed, 8 Apr 2020 03:46:58 +0200
Subject: [PATCH 1/1] mysql fixes


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1111111..2222222 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -135,7 +135,6 @@ IF(NOT DEFINED MANUFACTURER)
   MARK_AS_ADVANCED(MANUFACTURER)
 ENDIF()
 
-
 # MAX_INDEXES - Set the maximum number of indexes per table, default 64U
 IF (NOT MAX_INDEXES)
   SET(MAX_INDEXES 64U)
@@ -194,7 +193,7 @@ MARK_AS_ADVANCED(WITHOUT_SERVER FORCE_UNSUPPORTED_COMPILER)
 
 # Use 'uname -r' and 'rpm -qf /' to figure out host system.
 # For Docker images we cannot trust uname, so use rpm instead.
-IF(UNIX)
+IF(UNIX_)
   FIND_PROGRAM(MY_UNAME uname /bin /usr/bin /usr/local/bin /sbin)
   IF(MY_UNAME)
     EXECUTE_PROCESS(COMMAND ${MY_UNAME} -s
@@ -1283,6 +1282,10 @@ IF(WITH_UNIT_TESTS)
   INCLUDE(googletest)
 ENDIF()
 
+IF(HAVE_PTHREAD_H)
+  ADD_DEFINITIONS(-DUSING_PTHREADS)
+ENDIF()
+
 ADD_SUBDIRECTORY(include)
 ADD_SUBDIRECTORY(strings)
 ADD_SUBDIRECTORY(vio)
@@ -1324,7 +1327,9 @@ IF(WITH_UNIT_TESTS)
   ADD_SUBDIRECTORY(unittest/mytap/t)
 ENDIF()
 
-ADD_SUBDIRECTORY(client)
+IF(NOT WIN32)
+  ADD_SUBDIRECTORY(client)
+endif()
 ADD_SUBDIRECTORY(utilities)
 ADD_SUBDIRECTORY(share)
 ADD_SUBDIRECTORY(libservices)
@@ -1455,8 +1460,8 @@ IF(WIN32)
 ELSE()
   SET(CPACK_GENERATOR "TGZ")
 ENDIF() 
-ADD_SUBDIRECTORY(packaging/WiX)
-ADD_SUBDIRECTORY(packaging/solaris)
+#ADD_SUBDIRECTORY(packaging/WiX)
+#ADD_SUBDIRECTORY(packaging/solaris)
 
 # Produce separate tarballs for each INSTALL COMPONENT
 IF(PACK_SEPARATE_COMPONENTS)
@@ -1546,8 +1551,8 @@ IF(UNIX)
   )
 ENDIF()
 
-SET(DOXYGEN_OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/doxygen")
-FIND_PACKAGE(Doxygen)
+#SET(DOXYGEN_OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/doxygen")
+#FIND_PACKAGE(Doxygen)
 IF(DOXYGEN_FOUND)
   CONFIGURE_FILE(Doxyfile.in Doxyfile @ONLY)
   ADD_CUSTOM_TARGET(
diff --git a/client/CMakeLists.txt b/client/CMakeLists.txt
index 1111111..2222222 100644
--- a/client/CMakeLists.txt
+++ b/client/CMakeLists.txt
@@ -68,6 +68,7 @@ MYSQL_ADD_EXECUTABLE(mysqltest
   ENABLE_EXPORTS
   LINK_LIBRARIES mysqlclient
   )
+
 MYSQL_ADD_EXECUTABLE(mysqlcheck
   check/mysqlcheck.cc
   check/mysqlcheck_core.cc
diff --git a/client/mysqltest.cc b/client/mysqltest.cc
index 1111111..2222222 100644
--- a/client/mysqltest.cc
+++ b/client/mysqltest.cc
@@ -8893,10 +8893,10 @@ static void signal_handler(int sig) {
 #ifdef _WIN32
 
 LONG WINAPI exception_filter(EXCEPTION_POINTERS *exp) {
-  __try {
+  try {
     my_set_exception_pointers(exp);
     signal_handler(exp->ExceptionRecord->ExceptionCode);
-  } __except (EXCEPTION_EXECUTE_HANDLER) {
+  } except (EXCEPTION_EXECUTE_HANDLER) {
     fputs("Got exception in exception handler!\n", stderr);
   }
 
diff --git a/cmake/boost.cmake b/cmake/boost.cmake
index 1111111..2222222 100644
--- a/cmake/boost.cmake
+++ b/cmake/boost.cmake
@@ -38,10 +38,10 @@
 # we assume that the correct version (see below)
 # is installed on the compile host in the standard location.
 
-SET(BOOST_PACKAGE_NAME "boost_1_70_0")
+SET(BOOST_PACKAGE_NAME "boost_1_71_0")
 SET(BOOST_TARBALL "${BOOST_PACKAGE_NAME}.tar.gz")
 SET(BOOST_DOWNLOAD_URL
-  "https://dl.bintray.com/boostorg/release/1.70.0/source/${BOOST_TARBALL}"
+  "https://dl.bintray.com/boostorg/release/1.71.0/source/${BOOST_TARBALL}"
   )
 
 SET(OLD_PACKAGE_NAMES
@@ -60,6 +60,7 @@ SET(OLD_PACKAGE_NAMES
   "boost_1_67_0"
   "boost_1_68_0"
   "boost_1_69_0"
+  "boost_1_70_0"
 )
 
 MACRO(RESET_BOOST_VARIABLES)
@@ -297,10 +298,8 @@ IF(NOT BOOST_MAJOR_VERSION EQUAL 10)
   COULD_NOT_FIND_BOOST()
 ENDIF()
 
-IF(NOT BOOST_MINOR_VERSION EQUAL 70)
-  MESSAGE(WARNING "Boost minor version found is ${BOOST_MINOR_VERSION} "
-    "we need 70"
-    )
+IF(NOT BOOST_MINOR_VERSION VERSION_GREATER_EQUAL 70)
+  MESSAGE(WARNING "Boost minor version found is ${BOOST_MINOR_VERSION}, we need 70 or higher")
   COULD_NOT_FIND_BOOST()
 ENDIF()
 
diff --git a/cmake/floating_point.cmake b/cmake/floating_point.cmake
index 1111111..2222222 100644
--- a/cmake/floating_point.cmake
+++ b/cmake/floating_point.cmake
@@ -51,7 +51,7 @@ SET(code "
 CMAKE_PUSH_CHECK_STATE()
 STRING_APPEND(CMAKE_REQUIRED_FLAGS " -O3")
 
-IF(MY_COMPILER_IS_GNU)
+IF(MY_COMPILER_IS_GNU AND NOT CMAKE_CROSSCOMPILING)
   CHECK_C_SOURCE_RUNS("${code}" HAVE_C_FLOATING_POINT_FUSED_MADD)
   CHECK_CXX_SOURCE_RUNS("${code}" HAVE_CXX_FLOATING_POINT_FUSED_MADD)
 ENDIF()
diff --git a/cmake/ssl.cmake b/cmake/ssl.cmake
index 1111111..2222222 100644
--- a/cmake/ssl.cmake
+++ b/cmake/ssl.cmake
@@ -620,7 +620,7 @@ MACRO(MYSQL_CHECK_SSL_DLLS)
       ELSE()
         MESSAGE(STATUS "Cannot find SSL dynamic libraries")
         IF(OPENSSL_MINOR_VERSION VERSION_EQUAL 1)
-          SET(SSL_LIBRARIES ${SSL_LIBRARIES} crypt32.lib)
+          #SET(SSL_LIBRARIES ${SSL_LIBRARIES} crypt32.lib)
           MESSAGE(STATUS "SSL_LIBRARIES ${SSL_LIBRARIES}")
         ENDIF()
       ENDIF()
diff --git a/configure.cmake b/configure.cmake
index 1111111..2222222 100644
--- a/configure.cmake
+++ b/configure.cmake
@@ -240,6 +240,11 @@ CHECK_INCLUDE_FILES (vis.h HAVE_VIS_H) # Used by libedit
 # Cyrus SASL 2.1.26 on Solaris 11.4 has a bug that requires sys/types.h
 # to be included before checking if sasl/sasl.h exists
 CHECK_INCLUDE_FILES ("sys/types.h;sasl/sasl.h" HAVE_SASL_SASL_H)
+CHECK_INCLUDE_FILES (pthread.h HAVE_PTHREAD_H)
+
+IF(HAVE_PTHREAD_H)
+  ADD_DEFINITIONS(-DUSING_PTHREADS)
+ENDIF()
 
 # For libevent
 CHECK_INCLUDE_FILES(sys/devpoll.h HAVE_DEVPOLL)
diff --git a/extra/icu/source/common/putil.cpp b/extra/icu/source/common/putil.cpp
index 1111111..2222222 100644
--- a/extra/icu/source/common/putil.cpp
+++ b/extra/icu/source/common/putil.cpp
@@ -101,15 +101,15 @@
 #   define NOIME
 #   define NOMCX
 #   include <windows.h>
-#   include "unicode\uloc.h"
+#   include "unicode/uloc.h"
 #if U_PLATFORM_HAS_WINUWP_API == 0
 #   include "wintz.h"
 #else // U_PLATFORM_HAS_WINUWP_API
 typedef PVOID LPMSG; // TODO: figure out how to get rid of this typedef
 #include <Windows.Globalization.h>
 #include <windows.system.userprofile.h>
-#include <wrl\wrappers\corewrappers.h>
-#include <wrl\client.h>
+#include <wrl/wrappers/corewrappers.h>
+#include <wrl/client.h>
 
 using namespace ABI::Windows::Foundation;
 using namespace Microsoft::WRL;
diff --git a/extra/libevent/evdns.c b/extra/libevent/evdns.c
index 1111111..2222222 100644
--- a/extra/libevent/evdns.c
+++ b/extra/libevent/evdns.c
@@ -81,6 +81,8 @@
 #ifndef _WIN32_IE
 #define _WIN32_IE 0x400
 #endif
+#undef LF_FACESIZE
+#include <shtypes.h>
 #include <shlobj.h>
 #endif
 
@@ -3319,7 +3321,8 @@ evdns_resolv_set_defaults(struct evdns_base *base, int flags) {
 	if (flags & DNS_OPTION_NAMESERVERS) evdns_base_nameserver_ip_add(base,"127.0.0.1");
 }
 
-#ifndef EVENT__HAVE_STRTOK_R
+//#ifndef EVENT__HAVE_STRTOK_R
+#if 0
 static char *
 strtok_r(char *s, const char *delim, char **state) {
 	char *cp, *start;
diff --git a/include/CMakeLists.txt b/include/CMakeLists.txt
index 1111111..2222222 100644
--- a/include/CMakeLists.txt
+++ b/include/CMakeLists.txt
@@ -61,3 +61,7 @@ IF (WIN32 AND OPENSSL_APPLINK_C)
     COMPONENT Development
     )
 ENDIF()
+
+IF(HAVE_PTHREAD_H)
+  ADD_DEFINITIONS(-DUSING_PTHREADS)
+ENDIF()
diff --git a/include/m_string.h b/include/m_string.h
index 1111111..2222222 100644
--- a/include/m_string.h
+++ b/include/m_string.h
@@ -208,7 +208,7 @@ static inline ulonglong my_strtoull(const char *nptr, char **endptr, int base) {
 }
 
 static inline char *my_strtok_r(char *str, const char *delim, char **saveptr) {
-#if defined _WIN32
+#if defined NATIVE_WIN32
   return strtok_s(str, delim, saveptr);
 #else
   return strtok_r(str, delim, saveptr);
diff --git a/include/my_inttypes.h b/include/my_inttypes.h
index 1111111..2222222 100644
--- a/include/my_inttypes.h
+++ b/include/my_inttypes.h
@@ -40,7 +40,7 @@
 #endif
 
 #ifdef _WIN32
-#include <BaseTsd.h>
+#include <basetsd.h>
 typedef unsigned int uint;
 typedef unsigned short ushort;
 #endif
diff --git a/include/my_thread.h b/include/my_thread.h
index 1111111..2222222 100644
--- a/include/my_thread.h
+++ b/include/my_thread.h
@@ -71,7 +71,7 @@ static inline int is_timeout(int e) {
 #endif
 }
 
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__WINPTHREADS_VERSION)
 #define MY_THREAD_CREATE_JOINABLE 0
 #define MY_THREAD_CREATE_DETACHED 1
 typedef void *(__cdecl *my_start_routine)(void *);
@@ -82,7 +82,7 @@ typedef void *(*my_start_routine)(void *);
 #endif
 
 static inline my_thread_t my_thread_self() {
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__WINPTHREADS_VERSION)
   return GetCurrentThreadId();
 #else
   return pthread_self();
@@ -90,7 +90,7 @@ static inline my_thread_t my_thread_self() {
 }
 
 static inline int my_thread_equal(my_thread_t t1, my_thread_t t2) {
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__WINPTHREADS_VERSION)
   return t1 == t2;
 #else
   return pthread_equal(t1, t2);
@@ -98,7 +98,7 @@ static inline int my_thread_equal(my_thread_t t1, my_thread_t t2) {
 }
 
 static inline int my_thread_attr_init(my_thread_attr_t *attr) {
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__WINPTHREADS_VERSION)
   attr->dwStackSize = 0;
   /* Set to joinable by default to match Linux */
   attr->detachstate = MY_THREAD_CREATE_JOINABLE;
@@ -109,7 +109,7 @@ static inline int my_thread_attr_init(my_thread_attr_t *attr) {
 }
 
 static inline int my_thread_attr_destroy(my_thread_attr_t *attr) {
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__WINPTHREADS_VERSION)
   attr->dwStackSize = 0;
   /* Set to joinable by default to match Linux */
   attr->detachstate = MY_THREAD_CREATE_JOINABLE;
@@ -121,7 +121,7 @@ static inline int my_thread_attr_destroy(my_thread_attr_t *attr) {
 
 static inline int my_thread_attr_setstacksize(my_thread_attr_t *attr,
                                               size_t stacksize) {
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__WINPTHREADS_VERSION)
   attr->dwStackSize = (DWORD)stacksize;
   return 0;
 #else
@@ -131,7 +131,7 @@ static inline int my_thread_attr_setstacksize(my_thread_attr_t *attr,
 
 static inline int my_thread_attr_setdetachstate(my_thread_attr_t *attr,
                                                 int detachstate) {
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__WINPTHREADS_VERSION)
   attr->detachstate = detachstate;
   return 0;
 #else
@@ -141,7 +141,7 @@ static inline int my_thread_attr_setdetachstate(my_thread_attr_t *attr,
 
 static inline int my_thread_attr_getstacksize(my_thread_attr_t *attr,
                                               size_t *stacksize) {
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__WINPTHREADS_VERSION)
   *stacksize = (size_t)attr->dwStackSize;
   return 0;
 #else
@@ -150,7 +150,7 @@ static inline int my_thread_attr_getstacksize(my_thread_attr_t *attr,
 }
 
 static inline void my_thread_yield() {
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__WINPTHREADS_VERSION)
   SwitchToThread();
 #else
   sched_yield();
diff --git a/include/mysql/components/services/my_io_bits.h b/include/mysql/components/services/my_io_bits.h
index 1111111..2222222 100644
--- a/include/mysql/components/services/my_io_bits.h
+++ b/include/mysql/components/services/my_io_bits.h
@@ -50,7 +50,7 @@
 typedef int File; /* File descriptor */
 #ifdef _WIN32
 typedef int MY_MODE;
-typedef int mode_t;
+//typedef int mode_t;
 typedef int socket_len_t;
 typedef SOCKET my_socket;
 #else
diff --git a/include/mysql/components/services/my_thread_bits.h b/include/mysql/components/services/my_thread_bits.h
index 1111111..2222222 100644
--- a/include/mysql/components/services/my_thread_bits.h
+++ b/include/mysql/components/services/my_thread_bits.h
@@ -29,7 +29,7 @@
 */
 
 #ifndef MYSQL_ABI_CHECK
-#if defined(_WIN32)
+#if (defined(_WIN32) && !defined(USING_PTHREADS))
 #include <windows.h>
 #else
 #include <pthread.h>  // IWYU pragma: export
@@ -37,7 +37,7 @@
 #endif
 #endif /* MYSQL_ABI_CHECK */
 
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__WINPTHREADS_VERSION)
 typedef DWORD my_thread_t;
 typedef struct thread_attr {
   DWORD dwStackSize;
@@ -50,7 +50,7 @@ typedef pthread_attr_t my_thread_attr_t;
 
 struct my_thread_handle {
   my_thread_t thread{0};
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__WINPTHREADS_VERSION)
   HANDLE handle{INVALID_HANDLE_VALUE};
 #endif
 };
diff --git a/include/mysql/psi/mysql_socket.h b/include/mysql/psi/mysql_socket.h
index 1111111..2222222 100644
--- a/include/mysql/psi/mysql_socket.h
+++ b/include/mysql/psi/mysql_socket.h
@@ -39,7 +39,7 @@ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
 #include "mysql/psi/psi_socket.h"
 /* For socket api */
 #ifdef _WIN32
-#include <MSWSock.h>
+#include <mswsock.h>
 #ifdef WIN32_LEAN_AND_MEAN
 #include <winsock2.h>
 #include <ws2def.h>
diff --git a/include/thr_cond.h b/include/thr_cond.h
index 1111111..2222222 100644
--- a/include/thr_cond.h
+++ b/include/thr_cond.h
@@ -52,7 +52,7 @@
 #include "mysql/components/services/thr_cond_bits.h"
 #include "thr_mutex.h"
 
-#ifdef _WIN32
+#ifdef _MSC_VER
 /**
   Convert abstime to milliseconds
 */
@@ -93,7 +93,7 @@ static inline int native_cond_timedwait(native_cond_t *cond,
                                         native_mutex_t *mutex,
                                         const struct timespec *abstime) {
 #ifdef _WIN32
-  DWORD timeout = get_milliseconds(abstime);
+  DWORD timeout= abstime->tv_nsec / 1000000 + abstime->tv_sec * 1000;
   if (!SleepConditionVariableCS(cond, mutex, timeout)) return ETIMEDOUT;
   return 0;
 #else
diff --git a/libbinlogevents/include/binlog_event.h b/libbinlogevents/include/binlog_event.h
index 1111111..2222222 100644
--- a/libbinlogevents/include/binlog_event.h
+++ b/libbinlogevents/include/binlog_event.h
@@ -47,7 +47,7 @@
 #include "my_io.h"
 
 #if defined(_WIN32)
-#include <Winsock2.h>
+#include <winsock2.h>
 #else
 #include <sys/times.h>
 #endif
diff --git a/libmysql/CMakeLists.txt b/libmysql/CMakeLists.txt
index 1111111..2222222 100644
--- a/libmysql/CMakeLists.txt
+++ b/libmysql/CMakeLists.txt
@@ -267,7 +267,7 @@ IF(MSVC)
   ENDIF()
 ENDIF()
 
-IF(UNIX)
+IF(UNIX OR MINGW)
   MACRO(GET_VERSIONED_LIBNAME LIBNAME EXTENSION VERSION OUTNAME)
     SET(DOT_VERSION ".${VERSION}")
     IF(DOT_VERSION STREQUAL ".") 
@@ -291,16 +291,16 @@ MERGE_LIBRARIES_SHARED(libmysql ${LIBS_TO_MERGE}
   COMPONENT SharedLibraries)
 TARGET_LINK_LIBRARIES(libmysql PRIVATE ${LIBS_TO_LINK})
 
-IF(WIN32)
+#IF(WIN32)
   # So that libmysql_api_test below can find the .dll
-  ADD_CUSTOM_COMMAND(TARGET libmysql POST_BUILD
-    COMMAND ${CMAKE_COMMAND} -E copy_if_different
-    "${CMAKE_BINARY_DIR}/library_output_directory/${CMAKE_CFG_INTDIR}/libmysql.dll"
-    "${CMAKE_BINARY_DIR}/runtime_output_directory/${CMAKE_CFG_INTDIR}/libmysql.dll"
-    )
-ENDIF()
-
-IF(UNIX)
+#  ADD_CUSTOM_COMMAND(TARGET libmysql POST_BUILD
+#    COMMAND ${CMAKE_COMMAND} -E copy_if_different
+#    "${CMAKE_BINARY_DIR}/library_output_directory/${CMAKE_CFG_INTDIR}/libmysql.dll"
+#    "${CMAKE_BINARY_DIR}/runtime_output_directory/${CMAKE_CFG_INTDIR}/libmysql.dll"
+#    )
+#ENDIF()
+
+IF(UNIX OR MINGW)
   # libtool compatability
   IF(FREEBSD OR APPLE)
     SET(OS_SHARED_LIB_VERSION "${SHARED_LIB_MAJOR_VERSION}")
@@ -366,23 +366,23 @@ CONFIGURE_FILE(api_test.c.in ${CMAKE_CURRENT_BINARY_DIR}/api_test.c)
 # from @CLIENT_API_FUNCTIONS@ are declared by <mysql.h>. It will fail
 # to run if not all of these symbols are exported by the library.
 #
-MYSQL_ADD_EXECUTABLE(libmysql_api_test
-  ${CMAKE_CURRENT_BINARY_DIR}/api_test.c
-  LINK_LIBRARIES libmysql ${LIBRT}
-  SKIP_INSTALL
-  )
+#MYSQL_ADD_EXECUTABLE(libmysql_api_test
+#  ${CMAKE_CURRENT_BINARY_DIR}/api_test.c
+#  LINK_LIBRARIES libmysql ${LIBRT}
+#  SKIP_INSTALL
+#  )
 # Clang/UBSAN needs this on some platforms.
-SET_TARGET_PROPERTIES(libmysql_api_test PROPERTIES LINKER_LANGUAGE CXX)
+#SET_TARGET_PROPERTIES(libmysql_api_test PROPERTIES LINKER_LANGUAGE CXX)
 
-IF(MY_COMPILER_IS_GNU)
-  ADD_COMPILE_FLAGS(
-    ${CMAKE_CURRENT_BINARY_DIR}/api_test.c
-    COMPILE_FLAGS -Wstrict-prototypes
-    )
-ENDIF()
+#IF(MY_COMPILER_IS_GNU)
+#  ADD_COMPILE_FLAGS(
+#    ${CMAKE_CURRENT_BINARY_DIR}/api_test.c
+#    COMPILE_FLAGS -Wstrict-prototypes
+#    )
+#ENDIF()
 
 # Verify that libmysql_api_test runs OK
-ADD_CUSTOM_COMMAND(TARGET libmysql_api_test POST_BUILD
-  COMMAND libmysql_api_test
-  > ${CMAKE_CURRENT_BINARY_DIR}/libmysql_api_test.out
-  )
+#ADD_CUSTOM_COMMAND(TARGET libmysql_api_test POST_BUILD
+#  COMMAND libmysql_api_test
+#  > ${CMAKE_CURRENT_BINARY_DIR}/libmysql_api_test.out
+#  )
diff --git a/libmysql/authentication_win/CMakeLists.txt b/libmysql/authentication_win/CMakeLists.txt
index 1111111..2222222 100644
--- a/libmysql/authentication_win/CMakeLists.txt
+++ b/libmysql/authentication_win/CMakeLists.txt
@@ -39,7 +39,7 @@ SET(PLUGIN_SOURCES
   )
 
 ADD_CONVENIENCE_LIBRARY(auth_win_client ${PLUGIN_SOURCES} ${HEADERS}
-  LINK_LIBRARIES Secur32)
+  LINK_LIBRARIES secur32)
 
 # In IDE, group headers in a separate folder.
 
diff --git a/libmysql/authentication_win/plugin_client.cc b/libmysql/authentication_win/plugin_client.cc
index 1111111..2222222 100644
--- a/libmysql/authentication_win/plugin_client.cc
+++ b/libmysql/authentication_win/plugin_client.cc
@@ -32,7 +32,7 @@
 */
 
 #ifdef _MSC_VER
-#pragma comment(lib, "Secur32")
+#pragma comment(lib, "secur32")
 #endif
 
 static int win_auth_client_plugin_init(char *, size_t, int, va_list) {
diff --git a/mysys/CMakeLists.txt b/mysys/CMakeLists.txt
index 1111111..2222222 100644
--- a/mysys/CMakeLists.txt
+++ b/mysys/CMakeLists.txt
@@ -180,6 +180,12 @@ ADD_CONVENIENCE_LIBRARY(mysys ${MYSYS_SOURCES}
 IF(CMAKE_USE_PTHREADS_INIT AND CMAKE_C_FLAGS MATCHES "-fsanitize=")
   TARGET_LINK_LIBRARIES(mysys pthread)
 ENDIF()
+
+IF(HAVE_PTHREAD_H)
+  ADD_DEFINITIONS(-DUSING_PTHREADS)
+  TARGET_LINK_LIBRARIES(mysys pthread)
+ENDIF()
+
 # Needed to resolve OpenSSL dependency on Windows
 IF(WIN32)
   TARGET_LINK_LIBRARIES(mysys crypt32)
@@ -204,6 +210,8 @@ MYSQL_ADD_EXECUTABLE(mf_iocache_test
   )
 SET_TARGET_PROPERTIES(mf_iocache_test PROPERTIES COMPILE_FLAGS "-DMAIN")
 
+# Fails to compile static.
+IF (NOT WIN32)
 MYSQL_ADD_EXECUTABLE(base64_test
   base64.cc
   DEPENDENCIES GenError
@@ -211,3 +219,4 @@ MYSQL_ADD_EXECUTABLE(base64_test
   SKIP_INSTALL
   )
 SET_TARGET_PROPERTIES(base64_test PROPERTIES COMPILE_FLAGS "-DMAIN")
+ENDIF()
diff --git a/mysys/my_thr_init.cc b/mysys/my_thr_init.cc
index 1111111..2222222 100644
--- a/mysys/my_thr_init.cc
+++ b/mysys/my_thr_init.cc
@@ -373,7 +373,7 @@ static void my_sigabrt_handler(int sig) { __debugbreak(); }
 
 static void install_sigabrt_handler() {
   /*abort() should not override our exception filter*/
-  _set_abort_behavior(0, _CALL_REPORTFAULT);
+  //_set_abort_behavior(0, _CALL_REPORTFAULT);
   signal(SIGABRT, my_sigabrt_handler);
 }
 #endif
diff --git a/mysys/my_thread.cc b/mysys/my_thread.cc
index 1111111..2222222 100644
--- a/mysys/my_thread.cc
+++ b/mysys/my_thread.cc
@@ -32,7 +32,7 @@
 #include "my_thread.h"
 #include "mysql/components/services/my_thread_bits.h"
 
-#ifdef _WIN32
+#if defined (_WIN32) && !defined (USING_PTHREADS)
 #include <errno.h>
 #include <process.h>
 #include <signal.h>
@@ -55,7 +55,7 @@ static unsigned int __stdcall win_thread_start(void *p) {
 
 int my_thread_create(my_thread_handle *thread, const my_thread_attr_t *attr,
                      my_start_routine func, void *arg) {
-#ifndef _WIN32
+#if !defined(WIN32) || defined(USING_PTHREADS)
   return pthread_create(&thread->thread, attr, func, arg);
 #else
   struct thread_start_parameter *par;
@@ -97,7 +97,7 @@ error_return:
 }
 
 int my_thread_join(my_thread_handle *thread, void **value_ptr) {
-#ifndef _WIN32
+#if !defined(WIN32) || defined(USING_PTHREADS)
   return pthread_join(thread->thread, value_ptr);
 #else
   DWORD ret;
@@ -115,7 +115,7 @@ int my_thread_join(my_thread_handle *thread, void **value_ptr) {
 }
 
 int my_thread_cancel(my_thread_handle *thread) {
-#ifndef _WIN32
+#if !defined(WIN32) || defined(USING_PTHREADS)
   return pthread_cancel(thread->thread);
 #else
   bool ok = false;
@@ -132,7 +132,7 @@ int my_thread_cancel(my_thread_handle *thread) {
 }
 
 void my_thread_exit(void *value_ptr) {
-#ifndef _WIN32
+#if !defined(WIN32) || defined(USING_PTHREADS)
   pthread_exit(value_ptr);
 #else
   _endthreadex(0);
diff --git a/mysys/my_winfile.cc b/mysys/my_winfile.cc
index 1111111..2222222 100644
--- a/mysys/my_winfile.cc
+++ b/mysys/my_winfile.cc
@@ -103,10 +103,10 @@ class WindowsErrorGuard {
       if (orig_errno != errno) {
         dbug("handleinfo", [&]() {
           char orig_message[512];
-          strerror_s(orig_message, orig_errno);
+          strerror_s(orig_message, sizeof(orig_message), orig_errno);
 
           char curr_message[512];
-          strerror_s(curr_message, errno);
+          strerror_s(curr_message, sizeof(curr_message), errno);
           std::cerr << "orig_errno: " << orig_message << " (" << orig_errno
                     << ") errno: " << curr_message << " (" << errno
                     << ") le: " << le << std::endl;
diff --git a/mysys/stacktrace.cc b/mysys/stacktrace.cc
index 1111111..2222222 100644
--- a/mysys/stacktrace.cc
+++ b/mysys/stacktrace.cc
@@ -48,7 +48,7 @@
 #include "my_stacktrace.h"
 #include "template_utils.h"
 
-#ifndef _WIN32
+#ifndef _MSC_VER
 #include <signal.h>
 
 #include "my_thread.h"
@@ -564,10 +564,10 @@ void my_create_minidump(const char *name, HANDLE process, DWORD pid) {
 }
 
 void my_safe_puts_stderr(const char *val, size_t len) {
-  __try {
+  try {
     my_write_stderr(val, len);
     my_safe_printf_stderr("%s", "\n");
-  } __except (EXCEPTION_EXECUTE_HANDLER) {
+  } catch(...) {
     my_safe_printf_stderr("%s", "is an invalid string pointer\n");
   }
 }
diff --git a/router/src/harness/src/common.cc b/router/src/harness/src/common.cc
index 1111111..2222222 100644
--- a/router/src/harness/src/common.cc
+++ b/router/src/harness/src/common.cc
@@ -115,10 +115,10 @@ void rename_thread(const char thread_name[16]) {
   info.dwFlags = 0;
 #pragma warning(push)
 #pragma warning(disable : 6320 6322)
-  __try {
+  try {
     RaiseException(MS_VC_EXCEPTION, 0, sizeof(info) / sizeof(ULONG_PTR),
                    (ULONG_PTR *)&info);
-  } __except (EXCEPTION_EXECUTE_HANDLER) {
+  } catch(...) {
   }
 #pragma warning(pop)
 #endif  // #ifdef _DEBUG
diff --git a/scripts/CMakeLists.txt b/scripts/CMakeLists.txt
index 1111111..2222222 100644
--- a/scripts/CMakeLists.txt
+++ b/scripts/CMakeLists.txt
@@ -22,7 +22,16 @@
 
 ADD_SUBDIRECTORY(sys_schema)
 
-MYSQL_ADD_EXECUTABLE(comp_sql comp_sql.cc SKIP_INSTALL)
+IF(CMAKE_CROSSCOMPILING)
+  SET(IMPORT_COMP_SQL "IMPORTFILE-NOTFOUND"
+  CACHE FILEPATH "Point it to the export file from a native build")
+  INCLUDE(${IMPORT_COMP_SQL})
+ENDIF(CMAKE_CROSSCOMPILING)
+
+if (NOT CMAKE_CROSSCOMPILING)
+  MYSQL_ADD_EXECUTABLE(comp_sql comp_sql.cc SKIP_INSTALL)
+  EXPORT(TARGETS comp_sql FILE ${CMAKE_BINARY_DIR}/ImportCompSQL.cmake)
+endif()
 
 # Add compiler information, for easier debugging of output from mysql_config.
 SET(COMPILER_ID_AND_VERSION
@@ -330,7 +339,11 @@ MACRO(EXTRACT_LINK_LIBRARIES target var)
     LIST(REMOVE_DUPLICATES ${target}_LIB_DEPENDS)
     FOREACH(lib ${${target}_LIB_DEPENDS})
       # Filter out "general", it is not a library, just CMake hint
-      IF(NOT lib STREQUAL "general" AND NOT ${var}  MATCHES "-l${lib} ")
+      #IF(NOT lib STREQUAL "general" AND NOT ${var}  MATCHES "-l${lib} ")
+      # To check if "${var}" contains "-l${lib} ", use replace
+      # can't use MATCHES because ${lib} may contain special chars.
+      STRING(REPLACE "-l${lib} " "" var_repl ${var})
+      IF(NOT lib STREQUAL "general" AND ${var} STREQUAL ${var_repl})
         IF (lib MATCHES "^\\-l")
           SET(${var} "${${var}} ${lib} ")
         ELSEIF (lib MATCHES "^\\-L")
diff --git a/scripts/sys_schema/CMakeLists.txt b/scripts/sys_schema/CMakeLists.txt
index 1111111..2222222 100644
--- a/scripts/sys_schema/CMakeLists.txt
+++ b/scripts/sys_schema/CMakeLists.txt
@@ -188,6 +188,11 @@ SET(SYS_SCHEMA_SOURCES
   after_setup.sql
   )
 
+IF(CMAKE_CROSSCOMPILING)
+  SET(IMPORT_COMP_SQL "IMPORTFILE-NOTFOUND"
+  CACHE FILEPATH "Point it to the export file from a native build")
+  INCLUDE(${IMPORT_COMP_SQL})
+ENDIF(CMAKE_CROSSCOMPILING)
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/ALL_SYS_SCHEMA.sql
diff --git a/sql/log_event.cc b/sql/log_event.cc
index 1111111..2222222 100644
--- a/sql/log_event.cc
+++ b/sql/log_event.cc
@@ -749,11 +749,8 @@ bool net_field_length_checked(const uchar **packet, size_t *max_length,
   }
   return false;
 }
-template bool net_field_length_checked<size_t>(const uchar **packet,
-                                               size_t *max_length, size_t *out);
-template bool net_field_length_checked<ulonglong>(const uchar **packet,
-                                                  size_t *max_length,
-                                                  ulonglong *out);
+template bool net_field_length_checked<size_t>(const uchar **packet, size_t *max_length, size_t *out);
+//template bool net_field_length_checked<ulonglong>(const uchar **packet, size_t *max_length, ulonglong *out);
 
 /**
   Transforms a string into "" or its expression in 0x... form.
diff --git a/strings/CMakeLists.txt b/strings/CMakeLists.txt
index 1111111..2222222 100644
--- a/strings/CMakeLists.txt
+++ b/strings/CMakeLists.txt
@@ -66,7 +66,16 @@ IF(MY_COMPILER_IS_CLANG AND
   ADD_COMPILE_FLAGS(dtoa.cc COMPILE_FLAGS "-fno-strict-aliasing")
 ENDIF()
 
-MYSQL_ADD_EXECUTABLE(uca9dump uca9-dump.cc SKIP_INSTALL)
+IF(CMAKE_CROSSCOMPILING)
+  SET(IMPORT_UCA9DUMP "IMPORTFILE-NOTFOUND"
+  CACHE FILEPATH "Point it to the export file from a native build")
+  INCLUDE(${IMPORT_UCA9DUMP})
+ENDIF(CMAKE_CROSSCOMPILING)
+
+if(NOT CMAKE_CROSSCOMPILING)
+  MYSQL_ADD_EXECUTABLE(uca9dump uca9-dump.cc SKIP_INSTALL)
+  EXPORT(TARGETS uca9dump FILE ${CMAKE_BINARY_DIR}/Importuca9dump.cmake)
+endif()
 
 SET(ZH_HANS_SRC_FILE ${CMAKE_SOURCE_DIR}/strings/lang_data/zh_hans.txt)
 SET(ZH_HANS_DST_FILE ${CMAKE_BINARY_DIR}/strings/uca900_zh_tbls.cc)
diff --git a/unittest/gunit/gunit_test_main.cc b/unittest/gunit/gunit_test_main.cc
index 1111111..2222222 100644
--- a/unittest/gunit/gunit_test_main.cc
+++ b/unittest/gunit/gunit_test_main.cc
@@ -80,10 +80,10 @@ static void signal_handler(int sig) {
 #ifdef _WIN32
 
 LONG WINAPI exception_filter(EXCEPTION_POINTERS *exp) {
-  __try {
+  try {
     my_set_exception_pointers(exp);
     signal_handler(exp->ExceptionRecord->ExceptionCode);
-  } __except (EXCEPTION_EXECUTE_HANDLER) {
+  } catch(...) {
     fputs("Got exception in exception handler!\n", stderr);
   }
 
diff --git a/utilities/CMakeLists.txt b/utilities/CMakeLists.txt
index 1111111..2222222 100644
--- a/utilities/CMakeLists.txt
+++ b/utilities/CMakeLists.txt
@@ -22,20 +22,43 @@
 
 ADD_WSHADOW_WARNING()
 
+# See https://bugs.mysql.com/bug.php?id=61340
+# See https://gitlab.kitware.com/cmake/community/wikis/doc/cmake/CrossCompiling
+
+# when crosscompiling import the executable targets from a file
+IF(CMAKE_CROSSCOMPILING)
+  SET(IMPORT_COMP_ERR "IMPORTFILE-NOTFOUND"
+  CACHE FILEPATH "Point it to the export file from a native build")
+  INCLUDE(${IMPORT_COMP_ERR})
+
+  SET(IMPORT_COMP_CLIENT_ERR "IMPORTFILE-NOTFOUND"
+  CACHE FILEPATH "Point it to the export file from a native build")
+  INCLUDE(${IMPORT_COMP_CLIENT_ERR})
+ENDIF(CMAKE_CROSSCOMPILING)
+
+# only build the generator if not crosscompiling
+# export the generator target to a file, so it can be imported
+#  (see above) by another build
+# the IF() is not necessary, but makes the intention clearer
+
 IF(NOT CMAKE_CROSSCOMPILING)
   MYSQL_ADD_EXECUTABLE(comp_err
     comp_err.cc
     COMPONENT Server
     LINK_LIBRARIES mysys
     )
+  EXPORT(TARGETS comp_err FILE ${CMAKE_BINARY_DIR}/ImportCompErr.cmake)
 ENDIF()
 
-MYSQL_ADD_EXECUTABLE(comp_client_err
-  comp_client_err.cc
-  ${CMAKE_SOURCE_DIR}/libmysql/errmsg.cc
-  LINK_LIBRARIES mysys
-  SKIP_INSTALL
-  )
+IF(NOT CMAKE_CROSSCOMPILING)
+  MYSQL_ADD_EXECUTABLE(comp_client_err
+    comp_client_err.cc
+    ${CMAKE_SOURCE_DIR}/libmysql/errmsg.cc
+    LINK_LIBRARIES mysys
+    SKIP_INSTALL
+    )
+  EXPORT(TARGETS comp_client_err FILE ${CMAKE_BINARY_DIR}/ImportCompClientErr.cmake)
+ENDIF()
 
 ADD_CUSTOM_COMMAND(OUTPUT ${PROJECT_BINARY_DIR}/include/mysqlclient_ername.h
   COMMAND comp_client_err
@@ -70,6 +93,9 @@ FILE(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/${INSTALL_MYSQLSHAREDIR})
 #
 # Please see errmsg_readme.txt in the same directory for more information.
 #
+
+
+
 ADD_CUSTOM_COMMAND(OUTPUT
   ${PROJECT_BINARY_DIR}/include/mysqld_error.h 
   ${PROJECT_BINARY_DIR}/${INSTALL_MYSQLSHAREDIR}/english/errmsg.sys
@@ -120,17 +146,23 @@ IF(LINUX_INSTALL_RPATH_ORIGIN)
   ADD_DEPENDENCIES(comp_err copy_openssl_dlls)
 ENDIF()
 
+# Fails to compile static.
+IF (NOT WIN32)
 MYSQL_ADD_EXECUTABLE(my_print_defaults
   my_print_defaults.cc
   COMPONENT Server
   LINK_LIBRARIES mysys
   )
+ENDIF()
+# Fails to compile static.
+IF (NOT WIN32)
 MYSQL_ADD_EXECUTABLE(perror
   perror.cc
   COMPONENT Server
   DEPENDENCIES GenError
   LINK_LIBRARIES mysys
   )
+ENDIF()
 IF(BUILD_BUNDLED_LZ4)
   MYSQL_ADD_EXECUTABLE(lz4_decompress
     lz4_decompress.cc
